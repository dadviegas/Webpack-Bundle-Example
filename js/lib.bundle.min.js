!function(t){function e(o){if(n[o])return n[o].exports;var r=n[o]={exports:{},id:o,loaded:!1};return t[o].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";function o(t){return t&&t.__esModule?t:{"default":t}}var r=n(5),i=o(r);n(4),n(2),n(3);var u=new i["default"](2,3),a=new i["default"](12,23),l={text:"i am lib file"};console.log(l.text,a.toString(),u.toString())},,function(t,e){var n={text:"i am file 1"};console.log(n.text)},function(t,e){var n={text:"i am file 2, test "};console.log(n.text)},function(t,e){var n={text:"i am file 3"};console.log(n.text)},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),r=function(){function t(e,o){n(this,t),this.x=e,this.y=o}return o(t,[{key:"toString",value:function(){return"("+this.x+","+this.y+")"}}]),t}();e["default"]=r,t.exports=e["default"]}]);
//# sourceMappingURL=data:application/json;base64,